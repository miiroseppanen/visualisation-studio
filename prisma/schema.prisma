// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Suggestions table - main table for storing visualization suggestions
model Suggestion {
  id                String   @id @default(cuid())
  title             String
  description       String
  author            String
  timestamp         DateTime @default(now())
  lastModified      DateTime @default(now()) @updatedAt
  upvotes           Int      @default(0)
  downvotes         Int      @default(0)
  status            SuggestionStatus @default(PENDING)
  category          String
  complexity        Complexity
  difficulty        Difficulty
  estimatedDevTime  Float    @default(0)
  version           String   @default("1.0.0")
  createdBy         String
  views             Int      @default(0)
  favorites         Int      @default(0)

  // Relations
  tags              SuggestionTag[]
  comments          Comment[]
  implementation    Implementation?
  dependencies      Dependency[]
  userInteractions  UserInteraction[]

  @@map("suggestions")
}

// Tags table for storing suggestion tags
model Tag {
  id                Int              @id @default(autoincrement())
  name              String           @unique
  suggestionTags    SuggestionTag[]

  @@map("tags")
}

// Suggestion tags junction table
model SuggestionTag {
  suggestionId      String
  tagId             Int
  suggestion        Suggestion       @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
  tag               Tag              @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([suggestionId, tagId])
  @@map("suggestion_tags")
}

// Comments table for suggestion comments
model Comment {
  id                String   @id @default(cuid())
  suggestionId      String
  author            String
  content           String
  timestamp         DateTime @default(now())
  upvotes           Int      @default(0)
  downvotes         Int      @default(0)
  suggestion        Suggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// Implementation details table for storing visualization configuration
model Implementation {
  suggestionId      String   @id
  type              ImplementationType
  baseSettings      Json?    // JSON string
  animationSettings Json?    // JSON string
  customParameters  Json?    // JSON string
  rendererConfig    Json?    // JSON string
  suggestion        Suggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)

  @@map("implementations")
}

// Dependencies table for storing suggestion dependencies
model Dependency {
  id                Int      @id @default(autoincrement())
  suggestionId      String
  dependencyName    String
  dependencyVersion String?
  suggestion        Suggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)

  @@map("dependencies")
}

// User interactions table for tracking votes and favorites
model UserInteraction {
  id                Int                @id @default(autoincrement())
  suggestionId      String
  userId            String
  interactionType   InteractionType
  timestamp         DateTime           @default(now())
  suggestion        Suggestion         @relation(fields: [suggestionId], references: [id], onDelete: Cascade)

  @@unique([suggestionId, userId, interactionType])
  @@map("user_interactions")
}

// Statistics table for caching computed statistics
model Statistics {
  id                String   @id @default("main")
  totalSuggestions  Int      @default(0)
  pendingCount      Int      @default(0)
  approvedCount     Int      @default(0)
  implementedCount  Int      @default(0)
  rejectedCount     Int      @default(0)
  lastUpdated       DateTime @default(now())

  @@map("statistics")
}

// Enums
enum SuggestionStatus {
  PENDING
  APPROVED
  IMPLEMENTED
  REJECTED
}

enum Complexity {
  LOW
  MEDIUM
  HIGH
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ImplementationType {
  GRID_FIELD
  FLOW_FIELD
  TURBULENCE
  CIRCULAR_FIELD
  TOPOGRAPHY
  PARTICLE_SWARM
  NEURAL_NETWORK
  WAVE_INTERFERENCE
  CELLULAR_AUTOMATA
  SOUND_WAVE
  CUSTOM
}

enum InteractionType {
  UPVOTE
  DOWNVOTE
  FAVORITE
  VIEW
} 